@page "/blog"
@inject HttpClient http;
@inject NavigationManager NavManager

<h3>Blog</h3>
@if(posts == null)
{
    <p>Loading...</p>
}
else
{
    <p>
        <button type="button" class="btn btn-primary" @onclick="OnPreviousPageClickAsync"><span class="oi oi-"></span>Previous Page</button>
        <button type="button" class="btn btn-primary" @onclick="OnNextPageClickAsync">Next Page</button>
    </p>
    @foreach(var post in posts)
    {
        <p>
            @post.Date.ToString("D")
            <a href="post/@post.Id">@post.Title</a>
            <button type="button" class="btn btn-primary" @onclick="()=>OnEditClick(post.Id)">Edit Post</button>
            <button type="button" class="btn btn-danger" @onclick="()=>OnDeleteClickAsync(post.Id)">Delete Post</button>
        </p>
    }
    <p>
        <button type="button" class="btn btn-primary" @onclick="OnAddClick">Add Post</button>
    </p>
}


@code {
    private List<Post>? posts;
    private int page = 1;

    protected override async Task OnInitializedAsync()
    {       
        await base.OnInitializedAsync();
        posts = await http.GetFromJsonAsync<List<Post>>($"api/Posts/{page}/10");
    }

    protected async Task OnNextPageClickAsync()
    {
        var nextPagePosts = await http.GetFromJsonAsync<List<Post>>($"api/Posts/{page+1}/10");

        //Only update the page if we got something back
        if (nextPagePosts?.Count() > 0)
        {
            posts = nextPagePosts;
            page++;
        }
    }

    protected async Task OnPreviousPageClickAsync()
    {
        if(page > 1) //Don't decrement if we are at the start
        {            
            posts = await http.GetFromJsonAsync<List<Post>>($"api/Posts/{--page}/10");
        }
    }

    protected void OnAddClick()
    {
        //Navigate to a detail page
        NavManager.NavigateTo("editpost");
    }


    protected void OnEditClick(int id)
    {
        NavManager.NavigateTo($"editpost/{id}");
    }

    protected async Task OnDeleteClickAsync(int id)
    {
        var result = await http.DeleteAsync($"api/Posts/{id}");
        //Update the data on the page since it has changed
        posts = await http.GetFromJsonAsync<List<Post>>($"api/Posts/{page}/10");
        StateHasChanged();
    }
}
